- name: Prepare data folder
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ caddy_data_config }}"
    - "{{ caddy_data_data }}"

- name: Stop systemd
  ansible.builtin.systemd:
    name: caddy
    daemon_reload: true
    enabled: true
    scope: user
    state: stopped
  ignore_errors: true

- name: Caddyfile
  ansible.builtin.copy:
    src: "caddy/Caddyfile"
    dest: "{{ caddy_data_caddyfile }}"
  notify:
    - Restart Caddy

- name: Caddy
  containers.podman.podman_container:
    env:
      CADDYFILE_AUTH_TOKEN: "{{ caddy_caddyfile_auth_token }}"
      CADDYFILE_BASIC_AUTH_PASS: "{{ caddy_caddyfile_basic_auth_pass }}"
      CADDYFILE_BASIC_AUTH_USER: "{{ caddy_caddyfile_basic_auth_user }}"
      CADDYFILE_HOST_ADDRESS: "{{ caddy_caddyfile_host_address }}"
      CADDYFILE_PROXY_SITE: "{{ server_domain }}"
      CADDYFILE_ZEROSSL_EMAIL: "{{ caddy_caddyfile_zerossl_email }}"
    generate_systemd:
      container_prefix: ""
      new: true
      path: /home/{{ ansible_user }}/.config/systemd/user
      pod_prefix: ""
      separator: ""
    image: "{{ caddy_image }}"
    name: caddy
    network:
      - caddy
    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 443:443/udp
    restart_policy: on-failure
    state: "{{ caddy_state }}"
    volumes:
      - "{{ caddy_data_caddyfile }}:/etc/caddy/Caddyfile:U,ro,z"
      - "{{ caddy_data_config }}:/config:U,z"
      - "{{ caddy_data_data }}:/data:U,z"
      - /etc/localtime:/etc/localtime:ro,z
  register: container
  until: container.failed == false

# To execute the restart immediately
- name: Flush handlers
  meta: flush_handlers

- name: Enable systemd service
  ansible.builtin.systemd:
    daemon_reload: true
    enabled: true
    name: caddy
    scope: user
    state: "{{ caddy_state }}"
  register: service
  until: service.failed == false
