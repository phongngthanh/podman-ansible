- name: Create service {{ application_name }}
  when: application_item.value.transform.state == "started"
  module_defaults:
    ansible.builtin.copy:
      mode: "0600"
    ansible.builtin.template:
      lstrip_blocks: true
      mode: "0600"
    ansible.builtin.systemd:
      name: "{{ application_name }}"
      daemon_reload: true
      state: started
      scope: "{{ container_systemd_scope }}"
  block:
    - name: Prepare image files {{ application_name }}
      block:
        - name: Create deployment folder {{ application_name }}
          ansible.builtin.file:
            path: "{{ container_quadlet_path }}/{{ application_name }}"
            state: directory
            mode: "0755"
        # Synchronize create new ssh connection every time so it's very slow on the CI server
        # https://stackoverflow.com/a/62776037
        # Synchronize does not work with root however, so we have to use the copy module
        # - name: Copy image build files {{ application_name }} # noqa: risky-file-permissions
        #   ansible.posix.synchronize:
        #     use_ssh_args: true
        #     rsync_opts: ["-4"] # Use this since the VPN on the CI server is IPv4 only
        #     src: "{{ application_name }}/"
        #     dest: "{{ container_quadlet_path }}/{{ application_name }}/"
        #   register: image_containerfile_state
        # The ansible.builtin.copy has bugs that does not detect file changes when only 1 file is copied
        # https://github.com/ansible/ansible/issues/38938
        # - name: Copy Containerfiles {{ application_name }} # noqa: risky-file-permissions
        #   ansible.builtin.copy:
        #     src: "{{ application_name }}/"
        #     dest: "{{ container_quadlet_path }}/{{ application_name }}/"
        #   register: image_containerfile_state
        # So we have to list the files and copy them one by one
        - name: Get list of Containerfiles to copy {{ application_name }}
          delegate_to: localhost
          become: false
          ansible.builtin.find:
            paths: roles/application/files/{{ application_name }}
            file_type: file
            recurse: true
          register: image_containerfile_list
        - name: Create Containerfile directory {{ application_name }}
          ansible.builtin.file:
            path: "{{ container_quadlet_path }}/{{ application_name }}/{{ item.path | dirname | basename }}"
            state: directory
            mode: "0755"
          loop: "{{ image_containerfile_list.files }}"
        - name: Copy Containerfiles {{ application_name }} # noqa: risky-file-permissions
          ansible.builtin.copy:
            src: "{{ item.path }}"
            dest: "{{ container_quadlet_path }}/{{ application_name }}/{{ item.path | dirname | basename }}/{{ item.path | basename }}"
          loop: "{{ image_containerfile_list.files }}"
          register: image_containerfile_state
        # For container: Copy the container file and build it on remote so that the image tag
        # can be updated via renovate
        - name: Get list of image to build {{ application_name }}
          ansible.builtin.find:
            paths: "{{ container_quadlet_path }}/{{ application_name }}"
            file_type: directory
          register: image_list
        # We use build image service since its build can be cached, unlike using podman kube build flag
        - name: Create build images services {{ application_name }} # noqa: risky-file-permissions
          ansible.builtin.template:
            src: quadlet/image.build.j2
            dest: "{{ container_quadlet_path }}/{{ item.path | basename }}.build"
          loop: "{{ image_list.files }}"
          register: image_build_service_state

    - name: Setup quadlet files {{ application_name }}
      vars:
        image_changed: "{{ image_build_service_state.changed or image_containerfile_state.changed }}"
      block:
        - name: Create kube service {{ application_name }}
          when: application_item.value.param.kind == "kube"
          block:
            - name: Setup kube deployment {{ application_name }}
              block:
                - name: Create kube deployment {{ application_name }} # noqa: risky-file-permissions
                  vars:
                    manifest_query: "{{ application_name }}.manifest"
                  ansible.builtin.copy:
                    content: "{{ application | json_query(manifest_query) }}"
                    dest: "{{ container_quadlet_path }}/{{ application_name }}/deployment.yaml"
                  register: kube_file_yaml
                - name: Create kube quadlet file {{ application_name }} # noqa: risky-file-permissions
                  ansible.builtin.template:
                    src: quadlet/service.kube.j2
                    dest: "{{ container_quadlet_path }}/{{ application_name }}.kube"
                  register: kube_file_quadlet
                - name: Start systemd service {{ application_name }}
                  block:
                    - name: Start systemd service {{ application_name }}
                      changed_when: false
                      when: not (kube_file_yaml.changed or kube_file_quadlet.changed)
                      ansible.builtin.systemd:
                      async: 45
                      poll: 0
                    - name: Restart systemd service if changed {{ application_name }} # noqa: args[module]
                      changed_when: false
                      when: kube_file_yaml.changed or kube_file_quadlet.changed or image_changed
                      ansible.builtin.systemd:
                        state: restarted
                      async: 45
                      poll: 0

        - name: Create container service {{ application_name }}
          when: application_item.value.param.kind == "container"
          block:
            - name: Register volumes variables {{ application_name }}
              when: application_item.value.param.volumes is defined
              ansible.builtin.set_fact:
                "{{ application_name }}_volume_{{ item.key }}": "{{ item.value.value }}"
              loop: "{{ volume_map | dict2items }}"
            - name: Create container quadlet file {{ application_name }} # noqa: risky-file-permissions
              ansible.builtin.template:
                src: "quadlet/{{ application_name }}.container.j2"
                dest: "{{ container_quadlet_path }}/{{ application_name }}.container"
              register: container_file_state
            - name: Start systemd service {{ application_name }}
              changed_when: false
              when: not container_file_state.changed
              ansible.builtin.systemd:
              async: 45
              poll: 0
            - name: Restart systemd service if changed {{ application_name }} # noqa: args[module] no-handler
              changed_when: false
              when: container_file_state.changed or image_changed
              ansible.builtin.systemd:
                state: restarted
              async: 45
              poll: 0

- name: Remove service {{ application_name }}
  when: application_item.value.transform.state == "absent"
  module_defaults:
    ansible.builtin.systemd:
      name: "{{ application_name }}"
      daemon_reload: true
      scope: "{{ container_systemd_scope }}"
      state: stopped
  block:
    - name: Check if container or kube service exists {{ application_name }}
      ansible.builtin.find:
        paths: "{{ container_quadlet_path }}/"
        patterns:
          - "{{ application_name }}.kube"
          - "{{ application_name }}.container"
      register: service_file_exists

    - name: Stop container service {{ application_name }}
      when: service_file_exists.files | length > 0
      ansible.builtin.systemd:

    - name: Find list of build service {{ application_name }}
      ansible.builtin.find:
        paths: "{{ container_quadlet_path }}/"
        file_type: any
        patterns: "{{ application_name }}*.build"
      register: build_service_list

    - name: Stop build service {{ application_name }}
      when: build_service_list.files | length > 0
      ansible.builtin.systemd:
        name: "{{ item.path | basename }}"
        state: stopped
      loop: "{{ build_service_list.files }}"

    - name: Find container systemd files {{ application_name }}
      ansible.builtin.find:
        paths: "{{ container_quadlet_path }}/"
        file_type: any
        patterns: "{{ application_name }}*"
      register: files_removal_list
    - name: Remove files {{ application_name }}
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ files_removal_list.files }}"
