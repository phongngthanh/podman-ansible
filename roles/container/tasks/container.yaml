- name: Setup systemd container {{ container_loop_var.key }}
  when: not container_loop_var.value.dashy_only
  tags:
    - "{{ container_loop_var.key }}"
  block:
    - name: Setup variable for user scope {{ container_loop_var.key }}
      ansible.builtin.set_fact:
        container_quadlet_path: "{{ ansible_user_dir }}/.config/containers/systemd"
        container_systemd_scope: user
      when: not container_loop_var.value.become

    - name: Setup variable for system scope {{ container_loop_var.key }}
      ansible.builtin.set_fact:
        container_quadlet_path: /etc/containers/systemd
        container_systemd_scope: system
      when: container_loop_var.value.become

    - name: Setup systemd container {{ container_loop_var.key }}
      become: "{{ container_loop_var.value.become }}"
      block:
        - name: Setup podman container {{ container_loop_var.key }}
          when: container_loop_var.value.state == "started"
          block:
            - name: Setup volumes {{ container_loop_var.key }}
              when: container_loop_var.value.volumes != {}
              block:
                - name: Get volume list {{ container_loop_var.key }}
                  changed_when: false
                  delegate_to: localhost
                  ansible.builtin.command:
                    chdir: cue
                    cmd: "{{ cue_path }} eval src/application.cue -e {{ container_loop_var.key }}.#param.volumes --out json" # Need this since cue is not installed globaly, and we may need to run this with sudo
                  register: volume_map
                - name: Set volume directory lists {{ container_loop_var.key }}
                  ansible.builtin.set_fact:
                    container_volume_list: "{{ volume_map.stdout | from_json | community.general.json_query(container_volume_list_query) }}"
                  vars:
                    container_volume_list_query: "* | [?type=='relativePathDir' || type=='absolutePathDir'].value"
                - name: Check if volume exists {{ container_loop_var.key }}
                  when: "'/dev/' not in item"
                  ansible.builtin.stat:
                    path: "{{ item }}"
                  loop: "{{ container_volume_list }}"
                  register: container_volume_state
                - name: Prepare volume {{ container_loop_var.key }}
                  when: not container_volume_state.skipped
                  become_method: containers.podman.podman_unshare
                  become: true
                  ansible.builtin.file:
                    path: "{{ item }}"
                    mode: "0755"
                    state: directory
                  loop: "{{ container_volume_state.results | json_query('[?stat.exists == `false`].item') }}"
                - name: Prepare files {{ container_loop_var.key }}
                  ansible.builtin.copy:
                    content: ""
                    dest: "{{ item }}"
                    force: false
                    mode: "0600"
                  loop: "{{ volume_map.stdout | from_json | community.general.json_query(container_volume_list_query) }}"
                  vars:
                    container_volume_list_query: "* | [?type=='file'].value"
                - name: Disable auth for arr container {{ container_loop_var.key }}
                  when:
                    - "'arr' in container_loop_var.key"
                    - container_loop_var.key != "bazarr"
                  block:
                    - name: Disable authentication for {{ container_loop_var.key }}
                      become_method: containers.podman.podman_unshare
                      become: true
                      community.general.xml:
                        path: "{{ global_volume_path }}/{{ container_loop_var.key }}/{{ container[container_loop_var.key].volumes.config | regex_replace('\\./', '') }}/config.xml"
                        xpath: "{{ item.key }}"
                        value: "{{ item.value }}"
                      loop:
                        - key: /Config/AuthenticationMethod
                          value: Basic
                        - key: /Config/AuthenticationRequired
                          value: DisabledForLocalAddresses
                      register: arr_config

                    - name: Restart {{ container_loop_var.key }} # noqa: no-handler
                      when: arr_config.changed
                      ansible.builtin.systemd:
                        name: "{{ container_loop_var.key }}"
                        scope: user
                        state: restarted

        - name: Setup container with quadlet {{ container_loop_var.key }}
          block:
            - name: Check if custom setup flow exists {{ container_loop_var.key }}
              delegate_to: localhost
              ansible.builtin.stat:
                path: roles/container/tasks/service/{{ container_loop_var.key }}.yaml
              register: custom_setup_flow
            - name: Create container with custom flow {{ container_loop_var.key }}
              when:
                - custom_setup_flow.stat.exists
                - container_loop_var.value.state == "started"
                - container_loop_var.value.postgres_action == "none"
              ansible.builtin.include_tasks:
                file: service/{{ container_loop_var.key }}.yaml
            - name: Setup container {{ container_loop_var.key }}
              when: not custom_setup_flow.stat.exists or container_loop_var.value.state == "absent" or container_loop_var.value.postgres_action != "none"
              ansible.builtin.include_tasks:
                file: container_quadlet.yaml
            - name: Setup postgres {{ container_loop_var.key }}
              when: container_loop_var.value.postgres_action != "none"
              ansible.builtin.include_tasks:
                file: container_postgres.yaml
