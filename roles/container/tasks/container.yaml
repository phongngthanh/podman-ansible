- name: Setup systemd container {{ container_item.key }}
  vars:
    container_service_name: "{{ container_item.key | regex_replace('_', '-') }}"
  when:
    - not container_item.value.dashy_only
    - container_item.value.caddy_proxy_url == ""
  tags:
    - "{{ container_item.key }}"
  block:
    - name: Setup variable for user scope {{ container_service_name }}
      ansible.builtin.set_fact:
        container_quadlet_path: "{{ ansible_user_dir }}/.config/containers/systemd"
        container_systemd_scope: user
      when: not container_item.value.become

    - name: Setup variable for system scope {{ container_service_name }}
      ansible.builtin.set_fact:
        container_quadlet_path: /etc/containers/systemd
        container_systemd_scope: system
      when: container_item.value.become

    - name: Setup systemd container {{ container_service_name }}
      become: "{{ container_item.value.become }}"
      block:
        - name: Setup podman container {{ container_service_name }}
          when: container_item.value.state == "started"
          block:
            - name: Setup volumes {{ container_service_name }}
              when: container_item.value.volumes != {}
              block:
                - name: Get volume list for {{ container_service_name }}
                  # We have to use set_fact since vars make the tasks unable to be skipped
                  ansible.builtin.set_fact:
                    volume_list: "{{ container_manifest.stdout | from_json | json_query(volume_list_query) }}"
                    volume_map: "{{ container_manifest.stdout | from_json | json_query(volume_map_query) }}"
                  vars:
                    volume_map_query: application.{{ container_item.key }}.param.volumes
                    volume_list_query: "{{ volume_map_query }}.*"
                - name: Check if volume exists {{ container_service_name }}
                  when: "'/dev/' not in item"
                  ansible.builtin.stat:
                    path: "{{ item }}"
                  vars:
                    volume_query: "[?type == `relativePathDir` || type == `absolutePathDir`].value"
                  loop: "{{ volume_list | json_query(volume_query) }}"
                  register: container_volume_state
                - name: Prepare volume {{ container_service_name }}
                  when: not container_volume_state.skipped
                  ansible.builtin.file:
                    path: "{{ item }}"
                    mode: "0755"
                    state: directory
                  loop: "{{ container_volume_state.results | default([]) | json_query('[?stat.exists == `false`].item') }}"
                - name: Prepare files {{ container_service_name }}
                  ansible.builtin.copy:
                    content: ""
                    dest: "{{ item }}"
                    force: false
                    mode: "0600"
                  vars:
                    volume_query: "[?type==`file`].value"
                  loop: "{{ volume_list | json_query(volume_query) }}"

            - name: Disable auth for arr container {{ container_service_name }}
              when:
                - "'arr' in container_service_name"
                - container_service_name != "bazarr"
              block:
                - name: Disable authentication for {{ container_service_name }}
                  community.general.xml:
                    path: "{{ volume_map | json_query('config.value') }}/config.xml"
                    xpath: "{{ item.key }}"
                    value: "{{ item.value }}"
                  loop:
                    - key: /Config/AuthenticationMethod
                      value: Basic
                    - key: /Config/AuthenticationRequired
                      value: DisabledForLocalAddresses
                  register: arr_config
                - name: Restart {{ container_service_name }} # noqa: no-handler
                  when: arr_config.changed
                  ansible.builtin.systemd:
                    name: "{{ container_service_name }}"
                    scope: user
                    state: restarted

        - name: Setup container with quadlet {{ container_service_name }}
          block:
            - name: Check if custom setup flow exists {{ container_service_name }}
              delegate_to: localhost
              become: false
              ansible.builtin.stat:
                path: roles/container/tasks/service/{{ container_service_name }}.yaml
              register: custom_flow
            - name: Create container with custom flow {{ container_service_name }}
              when:
                - custom_flow.stat.exists
                - container_item.value.state == "started"
                - container_item.value.postgres_action == "none"
              ansible.builtin.include_tasks:
                file: service/{{ container_service_name }}.yaml
            - name: Setup container {{ container_service_name }}
              when: not custom_flow.stat.exists or container_item.value.state == "absent" or container_item.value.postgres_action != "none"
              ansible.builtin.include_tasks:
                file: container_quadlet.yaml
            - name: Setup postgres {{ container_service_name }}
              when: container_item.value.postgres_action != "none"
              ansible.builtin.include_tasks:
                file: container_postgres.yaml
