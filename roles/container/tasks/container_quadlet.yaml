- name: Create service {{ container_loop_var.key }}
  when: container_loop_var.value.state == "started"
  module_defaults:
    ansible.builtin.template:
      lstrip_blocks: true
      mode: "0600"
    ansible.builtin.systemd:
      name: "{{ container_loop_var.key }}"
      daemon_reload: true
      state: started
      scope: "{{ container_systemd_scope }}"
  block:
    - name: Prepare image files {{ container_loop_var.key }}
      block:
        - name: Create deployment folder {{ container_loop_var.key }}
          ansible.builtin.file:
            path: "{{ container_quadlet_path }}/{{ container_loop_var.key }}"
            state: directory
            mode: "0755"
        # We stopped using synchronized since there are not that many files,
        # and synchronize create new ssh connection every time so it's very slow on the CI server
        # https://stackoverflow.com/a/62776037
        - name: Copy image files {{ container_loop_var.key }} # noqa: risky-file-permissions
          ansible.builtin.copy:
            src: "{{ container_loop_var.key }}/"
            dest: "{{ container_quadlet_path }}/{{ container_loop_var.key }}/"
        # For container: Copy the container file and build it on remote so that the image tag
        # can be updated via renovate
        - name: Build image for container {{ container_loop_var.key }}
          when: container_loop_var.value.kind == "container"
          block:
            - name: Get list of image to build {{ container_loop_var.key }}
              ansible.builtin.find:
                paths: "{{ container_quadlet_path }}/{{ container_loop_var.key }}"
                file_type: directory
              register: image_list
            - name: Build images for kube file {{ container_loop_var.key }}
              containers.podman.podman_image:
                name: "{{ item.path | basename }}"
                path: "{{ item.path }}"
                force: true
              loop: "{{ image_list.files }}"

    - name: Create kube service {{ container_loop_var.key }}
      when: container_loop_var.value.kind == "kube"
      block:
        - name: Prepare kube deployment {{ container_loop_var.key }}
          become: false
          delegate_to: localhost
          block:
            - name: Render kube deployment {{ container_loop_var.key }}
              changed_when: false
              ansible.builtin.shell:
                chdir: cue
                cmd: CUE_EXPERIMENT=embed cue export --inject name={{ container_loop_var.key }} --out text
              register: cue_dump
        - name: Setup kube deployment {{ container_loop_var.key }}
          block:
            - name: Create kube deployment {{ container_loop_var.key }}
              ansible.builtin.copy:
                content: "{{ cue_dump.stdout }}"
                mode: "0600"
                dest: "{{ container_quadlet_path }}/{{ container_loop_var.key }}/deployment.yaml"
              register: kube_file_yaml
            - name: Create kube quadlet file {{ container_loop_var.key }} # noqa: risky-file-permissions
              ansible.builtin.template:
                src: quadlet/service.kube.j2
                dest: "{{ container_quadlet_path }}/{{ container_loop_var.key }}.kube"
              register: kube_file_quadlet
            - name: Start systemd service {{ container_loop_var.key }}
              block:
                - name: Start systemd service {{ container_loop_var.key }}
                  changed_when: false
                  when: not (kube_file_yaml.changed or kube_file_quadlet.changed)
                  ansible.builtin.systemd:
                  async: 45
                  poll: 0
                - name: Restart systemd service if changed {{ container_loop_var.key }} # noqa: args[module]
                  changed_when: false
                  when: kube_file_yaml.changed or kube_file_quadlet.changed
                  ansible.builtin.systemd:
                    state: restarted
                  async: 45
                  poll: 0

    - name: Create container service {{ container_loop_var.key }}
      when: container_loop_var.value.kind == "container"
      block:
        - name: Create container quadlet file {{ container_loop_var.key }} # noqa: risky-file-permissions
          ansible.builtin.template:
            src: "quadlet/{{ container_loop_var.key }}.container.j2"
            dest: "{{ container_quadlet_path }}/{{ container_loop_var.key }}.container"
          register: container_file_state
        - name: Start systemd service {{ container_loop_var.key }}
          changed_when: false
          when: not container_file_state.changed
          ansible.builtin.systemd:
          async: 45
          poll: 0
        - name: Restart systemd service if changed {{ container_loop_var.key }} # noqa: args[module] no-handler
          changed_when: false
          when: container_file_state.changed
          ansible.builtin.systemd:
            state: restarted
          async: 45
          poll: 0

- name: Remove service {{ container_loop_var.key }}
  when: container_loop_var.value.state == "absent"
  module_defaults:
    ansible.builtin.systemd:
      name: "{{ container_loop_var.key }}"
      daemon_reload: true
      scope: "{{ container_systemd_scope }}"
      state: stopped
  block:
    - name: Remove kube service {{ container_loop_var.key }}
      when: container_loop_var.value.kind == "kube"
      block:
        - name: Check if kube file exists {{ container_loop_var.key }}
          ansible.builtin.stat:
            path: "{{ container_quadlet_path }}/{{ container_loop_var.key }}.kube"
          register: kube_file_exists
        - name: Stop systemd service {{ container_loop_var.key }}
          when: kube_file_exists.stat.exists
          ansible.builtin.systemd:
        - name: Remove kube file {{ container_loop_var.key }}
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ container_quadlet_path }}/{{ container_loop_var.key }}.kube"
            - "{{ container_quadlet_path }}/{{ container_loop_var.key }}"

    - name: Remove container service {{ container_loop_var.key }}
      when: container_loop_var.value.kind == "container"
      block:
        - name: Check if container file exists {{ container_loop_var.key }}
          ansible.builtin.stat:
            path: "{{ container_quadlet_path }}/{{ container_loop_var.key }}"
          register: container_file_exists
        - name: Stop systemd service {{ container_loop_var.key }}
          when: container_file_exists.stat.exists
          ansible.builtin.systemd:
        - name: Remove container file {{ container_loop_var.key }}
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ container_quadlet_path }}/{{ container_loop_var.key }}.container"
            - "{{ container_quadlet_path }}/{{ container_loop_var.key }}"
