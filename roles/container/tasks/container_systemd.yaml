- name: Create systemd service {{ container_loop_var.key }}
  when: container_loop_var.value.state == "started"
  module_defaults:
    ansible.builtin.systemd:
      name: "{{ container_loop_var.key }}"
      daemon_reload: true
      scope: "{{ container_systemd_scope }}"
  block:
    - name: Set container default restart state
      ansible.builtin.set_fact:
        container_recreate: false
    - name: Create volume {{ container_loop_var.key }}
      when: container_loop_var.value.volume
      containers.podman.podman_volume:
        name: "{{ item }}"
      loop: "{{ container_loop_var.value.volume }}"
    - name: Run service with pod {{ container_loop_var.key }}
      become: "{{ container_loop_var.value.become }}"
      when: container_final_pod
      block:
        - name: Create pod {{ container_loop_var.key }}
          ansible.builtin.import_tasks: container_pod.yaml
      rescue:
        - name: Recreate {{ container_loop_var.key }}
          ansible.builtin.include_tasks:
            file: container_recreate.yaml
    - name: Run service without pod {{ container_loop_var.key }}
      become: "{{ container_loop_var.value.become }}"
      when: not container_final_pod
      module_defaults:
        containers.podman.podman_container:
          state: "{{ container_loop_var.value.state }}"
      block:
        - name: Create container {{ container_loop_var.key }}
          ansible.builtin.import_tasks: "service/{{ container_loop_var.key }}.yaml"
      rescue:
        - name: Recreate {{ container_loop_var.key }}
          ansible.builtin.include_tasks:
            file: container_recreate.yaml
    - name: Recreate if config changes {{ container_loop_var.key }}
      when: container_recreate
      ansible.builtin.include_tasks:
        file: container_recreate.yaml
    # Need this since handlers doesn't work with include. Issues: https://github.com/ansible/ansible/issues/19765
    - name: Create systemd service file for {{ container_loop_var.key }}
      containers.podman.podman_generate_systemd:
        container_prefix: ""
        dest: "{{ container_systemd_path }}"
        name: "{{ container_loop_var.key }}"
        no_header: true
        pod_prefix: ""
        separator: ""
    - name: Enable systemd {{ container_loop_var.key }}
      when: not container_loop_var.value.timer
      ansible.builtin.systemd:
        enabled: true
        state: "{{ container_loop_var.value.state }}"
      register: container_service
      until: container_service.failed == false
    - name: Setup systemd timer {{ container_loop_var.key }}
      when: container_loop_var.value.timer
      block:
        - name: Setup systemd timer {{ container_loop_var.key }} # noqa: var-naming[no-role-prefix]
          ansible.builtin.include_role:
            name: systemd_timer
          vars:
            container_systemd_timer_name: "{{ container_loop_var.key }}"
            container_systemd_timer_become: "{{ container_loop_var.value.become }}"
            container_systemd_timer_schedule: "{{ container_loop_var.value.timer }}"
            container_systemd_timer_state: "{{ container_loop_var.value.state }}"
- name: Remove systemd service {{ container_loop_var.key }}
  when: container_loop_var.value.state == "absent"
  module_defaults:
    ansible.builtin.systemd:
      name: "{{ container_loop_var.key }}"
      daemon_reload: true
      enabled: false
      scope: "{{ container_systemd_scope }}"
      state: stopped
  block:
    - name: Check if systemd file for container exists {{ container_loop_var.key }}
      ansible.builtin.stat:
        path: "{{ container_systemd_path }}/{{ container_loop_var.key }}.service"
      register: container_systemd_file_state
    - name: Setup systemd file list {{ container_loop_var.key }}
      when:
        - container_systemd_file_state.stat.exists
      block:
        - name: Setup systemd file list for pod {{ container_loop_var.key }}
          when: container_final_pod
          block:
            - name: Get a list of systemd files {{ container_loop_var.key }}
              containers.podman.podman_pod_info:
                name: "{{ container_loop_var.key }}"
              register: container_pod_info
            - name: Reset list of systemd files {{ container_loop_var.key }}
              ansible.builtin.set_fact:
                container_name_list: []
            - name: Set list of systemd files {{ container_loop_var.key }}
              when: container_pod_info.pods and 'pod' not in item.Name
              ansible.builtin.set_fact:
                container_name_list: "{{ container_name_list + [item.Name] }}"
              loop: "{{ container_pod_info.pods[0].Containers }}"

        - name: Set systemd file list for container {{ container_loop_var.key }}
          when: not container_final_pod
          ansible.builtin.set_fact:
            container_name_list: ["{{ container_loop_var.key }}"]

        - name: Stop systemd service {{ container_loop_var.key }}
          ansible.builtin.systemd:
        - name: Remove containers {{ container_loop_var.key }}
          containers.podman.podman_container:
            name: "{{ item }}"
            state: absent
          loop: "{{ container_name_list }}"
        - name: Remove pod {{ container_loop_var.key }}
          when: container_final_pod
          register: pod_removal
          until: pod_removal.failed == false
          containers.podman.podman_pod:
            name: "{{ container_loop_var.key }}"
            state: absent
        - name: Remove secrets {{ container_loop_var.key }}
          no_log: true
          containers.podman.podman_secret:
            name: "{{ item.key }}"
            state: absent
          loop: "{{ container_loop_var.value.secrets | dict2items }}"
        - name: Remove volume {{ container_loop_var.key }}
          when: not container_loop_var.value.preserve_volume
          containers.podman.podman_volume:
            name: "{{ item }}"
            state: absent
          loop: "{{ container_loop_var.value.volume }}"
        - name: Remove systemd files {{ container_loop_var.key }}
          ansible.builtin.file:
            path: "{{ container_systemd_path }}/{{ item }}.service"
            state: absent
          loop: "{{ container_name_list }}"
        - name: Remove systemd timer
          when: container_loop_var.value.timer
          ansible.builtin.file:
            path: "{{ container_systemd_path }}/{{ container_loop_var.key }}.timer"
