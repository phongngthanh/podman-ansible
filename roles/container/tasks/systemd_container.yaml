- name: Setup systemd container
  tags:
    - "{{ systemd_container_loop.key }}"
  block:
    - name: Setup podman container with systemd
      when: state == "started"
      module_defaults:
        ansible.builtin.systemd:
          name: "{{ service_name }}"
          daemon_reload: true
          scope: user
        containers.podman.podman_pod:
          name: "{{ service_name }}"
          infra_name: "{{ service_name }}-pod"
          network: caddy
          state: "{{ state }}"
      block:
        - name: Prepare folder {{ service_name }} # noqa: risky-file-permissions
          become: true
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
          loop: "{{ folder }}"
        - name: Templates config file
          ansible.builtin.include_tasks:
            file: systemd_container_templates.yaml
          loop: "{{ templates }}"
          loop_control:
            loop_var: systemd_container_templates_loop
          register: restart_systemd
        - name: Create pod {{ service_name }}
          containers.podman.podman_pod:
          when: pod
        - name: Create container {{ service_name }}
          ansible.builtin.import_tasks: "service/{{ service_name }}.yaml"
        - name: Create systemd service file for {{ service_name }}
          containers.podman.podman_generate_systemd:
            container_prefix: ""
            dest: "{{ ansible_user_dir }}/.config/systemd/user/"
            name: "{{ service_name }}"
            no_header: true
            pod_prefix: ""
            separator: ""
        # Need this since handlers doesn't work with include. Issues: https://github.com/ansible/ansible/issues/19765
        - name: Restart if config files are changed {{ service_name }}
          ansible.builtin.systemd:
            state: restarted
          when: restart_systemd.changed
        - name: Enable systemd {{ service_name }}
          ansible.builtin.systemd:
            enabled: true
            state: "{{ state }}"
          register: service
          until: service.failed == false
          when: timer == ''
        - name: Setup systemd timer {{ service_name }}
          when: timer
          block:
            - name: Setup systemd timer {{ service_name }}
              ansible.builtin.include_role:
                name: systemd_timer
              vars:
                systemd_timer_name: "{{ service_name }}"
                systemd_timer_schedule: "{{ timer }}"
                systemd_timer_scope: user
                systemd_timer_state: "{{ state }}"

    - name: Stop podman container
      when: state == "absent"
      module_defaults:
        ansible.builtin.systemd:
          name: "{{ service_name }}"
          daemon_reload: true
          enabled: false
          scope: user
          state: stopped
      vars:
        systemd_file_list: ["{{ service_name }}"]
      block:
        - name: Check if systemd file for container exists {{ service_name }}
          ansible.builtin.stat:
            path: "{{ ansible_user_dir }}/.config/systemd/user/{{ service_name }}.service"
          register: systemd_service_file_state
        - name: Setup systemd file list {{ service_name }}
          when:
            - systemd_service_file_state.stat.exists
          block:
            - name: Setup systemd file list for pod {{ service_name }}
              when:
                - pod
              block:
                - name: Start the service once if timer {{ service_name }}
                  when: timer != ''
                  ansible.builtin.systemd:
                    name: "{{ service_name }}"
                    state: started
                - name: Get a list of systemd files {{ service_name }}
                  containers.podman.podman_pod_info:
                    name: "{{ service_name }}"
                  register: pod_info
                - name: Set list of systemd files {{ service_name }}
                  ansible.builtin.set_fact:
                    systemd_file_list: "{{ systemd_file_list + [item.Name] }}"
                  loop: "{{ pod_info.pods[0].Containers }}"
                - name: Stop systemd timer {{ service_name }}
                  when:
                    - timer != ''
                  ansible.builtin.systemd:
                    name: "{{ service_name }}.timer"

            - name: Stop container systemd {{ service_name }}
              when: timer != ''
              ansible.builtin.systemd:

            - name: Remove systemd files
              ansible.builtin.file:
                path: "{{ ansible_user_dir }}/.config/systemd/user/{{ item }}.service"
                state: absent
              loop: "{{ systemd_file_list }}"
            - name: Remove systemd timer
              when: timer != ''
              ansible.builtin.file:
                path: "{{ ansible_user_dir }}/.config/systemd/user/{{ service_name }}.timer"
