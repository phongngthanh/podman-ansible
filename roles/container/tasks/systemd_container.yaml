- name: Setup systemd container {{ systemd_container_loop.key }}
  tags:
    - "{{ systemd_container_loop.key }}"
  block:
    - name: Setup variable for user scope {{ service_name }}
      ansible.builtin.set_fact:
        systemd_service_path: "{{ ansible_user_dir }}/.config/systemd/user"
        systemd_scope: user
      when: not become

    - name: Setup variable for system scope {{ service_name }}
      ansible.builtin.set_fact:
        systemd_service_path: /etc/systemd/system
        systemd_scope: system
      when: become

    - name: Setup pod for service {{ service_name }}
      ansible.builtin.set_fact:
        final_pod: "{{ pod }}"
      when: timer == ''

    - name: Do not setup pod if service is timer {{ service_name }}
      ansible.builtin.set_fact:
        final_pod: false
      when: timer

    - name: Setup systemd container {{ service_name }}
      become: "{{ become }}"
      block:
        - name: Setup podman container with systemd
          when: state == "started"
          module_defaults:
            ansible.builtin.systemd:
              name: "{{ service_name }}"
              daemon_reload: true
              scope: "{{ systemd_scope }}"
            containers.podman.podman_pod:
              name: "{{ service_name }}"
              infra_name: "{{ service_name }}-pod"
              network: caddy
              state: "{{ state }}"
          block:
            - name: Check if folder exists {{ service_name }}
              ansible.builtin.stat:
                path: "{{ item }}"
              loop: "{{ folder }}"
              register: folder_state
            - name: Prepare folder {{ service_name }}
              module_defaults:
                ansible.builtin.file:
                  path: "{{ item }}"
                  state: directory
              when: not folder_state.skipped
              block:
                - name: Prepare folder if not exists {{ service_name }}
                  ansible.builtin.file:
                    owner: "{{ ansible_user }}"
                    group: "{{ ansible_user }}"
                    mode: "0755"
                  loop: "{{ folder }}"
                  when: not folder_state.results[0].stat.exists
                - name: Preserve folder if already exists {{ service_name }} # noqa: risky-file-permissions
                  become: true
                  ansible.builtin.file:
                  loop: "{{ folder }}"
                  when: folder_state.results[0].stat.exists
            - name: Templates config file
              ansible.builtin.include_tasks:
                file: systemd_container_templates.yaml
              loop: "{{ templates }}"
              loop_control:
                loop_var: systemd_container_templates_loop
              register: restart_systemd
            - name: Run service with pod {{ service_name }}
              become: "{{ become }}"
              when: final_pod
              block:
                - name: Create pod {{ service_name }}
                  containers.podman.podman_pod:
                    name: "{{ service_name }}"
                    infra_name: "{{ service_name }}-pod"
                    network: caddy
                    state: "{{ state }}"
                - name: Create container {{ service_name }}
                  module_defaults:
                    containers.podman.podman_container:
                      pod: "{{ service_name }}"
                      state: "{{ state }}"
                  ansible.builtin.import_tasks: "service/{{ service_name }}.yaml"
            - name: Run service without pod {{ service_name }}
              become: "{{ become }}"
              when: not final_pod
              module_defaults:
                containers.podman.podman_container:
                  state: "{{ state }}"
              ansible.builtin.import_tasks: "service/{{ service_name }}.yaml"
            - name: Create systemd service file for {{ service_name }}
              containers.podman.podman_generate_systemd:
                container_prefix: ""
                dest: "{{ systemd_service_path }}"
                name: "{{ service_name }}"
                no_header: true
                pod_prefix: ""
                separator: ""
            # Need this since handlers doesn't work with include. Issues: https://github.com/ansible/ansible/issues/19765
            - name: Restart if config files are changed {{ service_name }}
              ansible.builtin.systemd:
                state: restarted
              when: restart_systemd.changed
            - name: Enable systemd {{ service_name }}
              ansible.builtin.systemd:
                enabled: true
                state: "{{ state }}"
              register: service
              until: service.failed == false
              when: timer == ''
            - name: Setup systemd timer {{ service_name }}
              when: timer
              block:
                - name: Setup systemd timer {{ service_name }}
                  ansible.builtin.include_role:
                    name: systemd_timer
                  vars:
                    systemd_timer_name: "{{ service_name }}"
                    systemd_timer_become: "{{ become }}"
                    systemd_timer_schedule: "{{ timer }}"
                    systemd_timer_state: "{{ state }}"

        - name: Stop podman container
          when: state == "absent"
          module_defaults:
            ansible.builtin.systemd:
              name: "{{ service_name }}"
              daemon_reload: true
              enabled: false
              scope: "{{ systemd_scope }}"
              state: stopped
          vars:
            systemd_file_list: ["{{ service_name }}"]
          block:
            - name: Check if systemd file for container exists {{ service_name }}
              ansible.builtin.stat:
                path: "{{ systemd_service_path }}/{{ service_name }}.service"
              register: systemd_service_file_state
            - name: Setup systemd file list {{ service_name }}
              when:
                - systemd_service_file_state.stat.exists
              block:
                - name: Setup systemd file list for pod {{ service_name }}
                  when: final_pod
                  block:
                    - name: Get a list of systemd files {{ service_name }}
                      containers.podman.podman_pod_info:
                        name: "{{ service_name }}"
                      register: pod_info
                    - name: Set list of systemd files {{ service_name }}
                      ansible.builtin.set_fact:
                        systemd_file_list: "{{ systemd_file_list + [item.Name] }}"
                      loop: "{{ pod_info.pods[0].Containers }}"

                - name: Stop systemd service {{ service_name }}
                  ansible.builtin.systemd:
                - name: Remove systemd files {{ service_name }}
                  ansible.builtin.file:
                    path: "{{ systemd_service_path }}/{{ item }}.service"
                    state: absent
                  loop: "{{ systemd_file_list }}"
                - name: Remove systemd timer
                  when: timer != ''
                  ansible.builtin.file:
                    path: "{{ systemd_service_path }}/{{ service_name }}.timer"
