#jinja2:lstrip_blocks: True
(basic-auth) {
  basicauth / {
    {{ caddyfile_auth_user }} {{ caddyfile_auth_pass }}
  }
}
# CORS snippet
# https://caddyserver.com/docs/caddyfile/directives/import#examples
(cors) {
	@origin header Origin {args.0}
	header @origin Access-Control-Allow-Origin "{args.0}"
	header @origin Access-Control-Allow-Methods "OPTIONS,HEAD,GET,POST,PUT,PATCH,DELETE"
}
# A snippet to check if a cookie token is set. if not, store the current page as the referer and redirect to auth site
(proxy-auth) {
  # if cookie not = some-token-nonsense
  @no-auth {
    not path *favicon*
    not header_regexp mycookie Cookie myid={{ caddyfile_auth_token }}
    # https://github.com/caddyserver/caddy/issues/3916
  }
  # store current time, page and redirect to auth
  route @no-auth {
    header Set-Cookie "myreferer={scheme}://{host}{uri}; Domain={{ server_domain }}; Path=/; Max-Age=30; HttpOnly; SameSite=Strict; Secure"
    redir https://auth.{{ server_domain }}
  }
}
auth.{{ server_domain }} {
  route {
    # require authentication
    import basic-auth
    # upon successful auth, set a client token
    header Set-Cookie "myid={{ caddyfile_auth_token }}; Domain={{ server_domain }}; Path=/; Max-Age=3600; HttpOnly; SameSite=Strict; Secure"
    # delete the referer cookie
    header +Set-Cookie "myreferer=null; Domain={{ server_domain }}; Path=/; Expires=Thu, 25 Sep 1971 12:00:00 GMT; HttpOnly; SameSite=Strict; Secure"
    # redirect back to the original site
    redir {http.request.cookie.myreferer}
  }
  # fallback
  respond "Nope"
}
(global-config) {
    encode gzip
}
(security-header) {
  header_down Strict-Transport-Security "max-age=15552000;"
  header_down Referrer-Policy "strict-origin-when-cross-origin"
  header_down X-XSS-Protection "1; mode=block"
  header_down X-Content-Type-Options "nosniff"
  header_down X-Frame-Options "SAMEORIGIN"
}
{% for key,value in container | dictsort %}
  {% if value.state == 'started' %}
    {% if not value.caddy_proxy_custom %}
{{ key | replace("_", "-") }}.{{ server_domain }} {
      {% if not value.certbot %}
    import global-config
        {% if value.caddy_sso %}
    import proxy-auth
        {% endif %}
        {% if value.caddy_rewrite %}
          {% for rule in value.caddy_rewrite %}
    rewrite {{ rule.src }} {{ rule.dest }}
          {% endfor %}
        {% endif %}
        {% if value.caddy_host_network %}
    reverse_proxy {{ caddyfile_host_address }}:{{ value.caddy_proxy_port }} {
        {% else %}
    reverse_proxy {{ key }}:{{ value.caddy_proxy_port }} {
        {% endif %}
        import security-header
    }
        {% if key == 'nextcloud' %}
    redir /.well-known/carddav /remote.php/carddav 301
    redir /.well-known/caldav /remote.php/caldav 301
        {% endif %}
        {% else %}

      {% endif %}
}
    {% endif %}
  {% endif %}
{% endfor %}
calibre.{{ server_domain }} {
  import global-config
  import proxy-auth
  reverse_proxy calibre:8080 {
      import security-header
  }
}
calibre-content.{{ server_domain }} {
  import global-config
  reverse_proxy calibre:8081 {
      import security-header
  }
}
reactive-resume.{{ server_domain }} {
  import global-config
  handle_path /api/* {
      reverse_proxy reactive_resume:3100
  }
  handle {
    reverse_proxy reactive_resume:3000 {
      import security-header
    }
  }
}
immich.{{ server_domain }} {
  import global-config
  handle /api* {
      uri strip_prefix /api
      reverse_proxy immich:3001
  }
  handle {
      reverse_proxy immich:3000
  }
}
netdata.{{ server_domain }} {
  import global-config
  import proxy-auth
  reverse_proxy {{ caddyfile_host_address }}:19999 {
      import security-header
  }
}
{{ caddyfile_lan_address }} {
  import global-config
  reverse_proxy https://{{ caddyfile_host_address }}:9090 {
      import security-header
      transport http {
          tls_insecure_skip_verify
          }
      }
  tls internal
}
